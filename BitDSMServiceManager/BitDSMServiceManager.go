// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package BitDSMServiceManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IRewardsCoordinatorRewardsSubmission is an auto generated low-level Go binding around an user-defined struct.
type IRewardsCoordinatorRewardsSubmission struct {
	StrategiesAndMultipliers []IRewardsCoordinatorStrategyAndMultiplier
	Token                    common.Address
	Amount                   *big.Int
	StartTimestamp           uint32
	Duration                 uint32
}

// IRewardsCoordinatorStrategyAndMultiplier is an auto generated low-level Go binding around an user-defined struct.
type IRewardsCoordinatorStrategyAndMultiplier struct {
	Strategy   common.Address
	Multiplier *big.Int
}

// ISignatureUtilsSignatureWithSaltAndExpiry is an auto generated low-level Go binding around an user-defined struct.
type ISignatureUtilsSignatureWithSaltAndExpiry struct {
	Signature []byte
	Salt      [32]byte
	Expiry    *big.Int
}

// BitDSMServiceManagerMetaData contains all meta data concerning the BitDSMServiceManager contract.
var BitDSMServiceManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_avsDirectory\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_bitDSMRegistry\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_rewardsCoordinator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_delegationManager\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"avsDirectory\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"confirmDeposit\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"confirmWithdrawal\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"transaction\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"createAVSRewardsSubmission\",\"inputs\":[{\"name\":\"rewardsSubmissions\",\"type\":\"tuple[]\",\"internalType\":\"structIRewardsCoordinator.RewardsSubmission[]\",\"components\":[{\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\",\"internalType\":\"structIRewardsCoordinator.StrategyAndMultiplier[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"contractIERC20\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"startTimestamp\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"duration\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deregisterOperatorFromAVS\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getOperatorRestakedStrategies\",\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRestakeableStrategies\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_rewardsInitiator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"bitcoinPodManager\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerOperatorToAVS\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithSaltAndExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"rewardsInitiator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setRewardsInitiator\",\"inputs\":[{\"name\":\"newRewardsInitiator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"stakeRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateAVSMetadataURI\",\"inputs\":[{\"name\":\"_metadataURI\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawBitcoinCompleteTx\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"completeTx\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawBitcoinPSBT\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"psbtTransaction\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"BitcoinWithdrawalTransactionSigned\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RewardsInitiatorUpdated\",\"inputs\":[{\"name\":\"prevRewardsInitiator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"newRewardsInitiator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false}]",
	Bin: "0x608060405234801561000f575f80fd5b5060043610610111575f3560e01c80638da5cb5b1161009e578063c0c53b8b1161006e578063c0c53b8b14610244578063e481af9d14610257578063f2fde38b1461025f578063fc299dee14610272578063fce36c7d14610285575f80fd5b80638da5cb5b146101fa5780639926ee7d1461020b578063a364f4da1461021e578063a98fb35514610231575f80fd5b80633bc28c8c116100e45780633bc28c8c1461016657806368304835146101795780636b3aa72e146101b8578063715018a6146101df5780637b615541146101e7575f80fd5b806333cfb7b71461011557806334c9b14e1461013e5780633b1a4e44146101535780633b7d82ef14610153575b5f80fd5b610128610123366004611cb1565b610298565b6040516101359190611cd3565b60405180910390f35b61015161014c366004611d5c565b6102a9565b005b610151610161366004611dac565b610576565b610151610174366004611cb1565b610844565b6101a07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610135565b6101a07f000000000000000000000000000000000000000000000000000000000000000081565b610151610858565b6101516101f5366004611e31565b61086b565b6033546001600160a01b03166101a0565b610151610219366004611fbe565b610ba6565b61015161022c366004611cb1565b610bfc565b61015161023f366004612062565b610c4d565b6101516102523660046120ae565b610c5e565b610128610d89565b61015161026d366004611cb1565b610d98565b6065546101a0906001600160a01b031681565b6101516102933660046120f6565b610e0e565b60606102a382610e20565b92915050565b336001600160a01b0316836001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ef573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103139190612164565b6001600160a01b03161461038a5760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79206f70657261746f722074686174206f776e732074686520706f642060448201527218d85b8818dbdb999a5c9b4819195c1bdcda5d606a1b60648201526084015b60405180910390fd5b609754604051638597447360e01b81526001600160a01b0385811660048301525f921690638597447390602401606060405180830381865afa1580156103d2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103f69190612193565b6020818101518251604080516bffffffffffffffffffffffff1960608b811b82168388015233901b16603482015260488101939093526068830191909152600160f81b6088830152805180830360690181526089909201905280519101209091505f61046182611139565b90505f6104a38287878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061118b92505050565b90506001600160a01b03811633146104fd5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964204f70657261746f72207369676e61747572650000000000006044820152606401610381565b6097548451602086015160405163397ee69b60e01b81526001600160a01b038b811660048301526024820193909352604481019190915291169063397ee69b906064015f604051808303815f87803b158015610557575f80fd5b505af1158015610569573d5f803e3d5ffd5b5050505050505050505050565b336001600160a01b0316866001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105bc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105e09190612164565b6001600160a01b0316146106555760405162461bcd60e51b815260206004820152603660248201527f4f6e6c79206f70657261746f722074686174206f776e732074686520706f642060448201527518d85b881c1c9bd8d95cdcc81dda5d1a191c985dd85b60521b6064820152608401610381565b60975460405163180fdd4960e31b81526001600160a01b0388811660048301525f92169063c07eea48906024015f60405180830381865afa15801561069c573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526106c391908101906121d1565b90505f87878787856040516020016106df95949392919061225c565b6040516020818303038152906040528051906020012090505f61070182611139565b90505f6107438287878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061118b92505050565b90506001600160a01b038116331461079d5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964204f70657261746f72207369676e61747572650000000000006044820152606401610381565b60405163326cca8560e01b81526001600160a01b038b169063326cca85906107cb908b908b90600401612299565b5f604051808303815f87803b1580156107e2575f80fd5b505af11580156107f4573d5f803e3d5ffd5b50506040518b81523392506001600160a01b038d1691507fce93a128bcccad6214b8d927323bca4acc32d14ee0ca93c4e647530c44306fc79060200160405180910390a350505050505050505050565b61084c6111ad565b61085581611207565b50565b6108606111ad565b6108695f611270565b565b336001600160a01b0316856001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108d59190612164565b6001600160a01b03161461094a5760405162461bcd60e51b815260206004820152603660248201527f4f6e6c79206f70657261746f722074686174206f776e732074686520706f642060448201527518d85b8818dbdb999a5c9b481dda5d1a191c985dd85b60521b6064820152608401610381565b60975460405163180fdd4960e31b81526001600160a01b0387811660048301529091169063c07eea48906024015f60405180830381865afa158015610991573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526109b891908101906121d1565b515f03610a075760405162461bcd60e51b815260206004820181905260248201527f4e6f207769746864726177616c207265717565737420746f20636f6e6669726d6044820152606401610381565b60975460405163180fdd4960e31b81526001600160a01b0387811660048301525f92169063c07eea48906024015f60405180830381865afa158015610a4e573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610a7591908101906121d1565b90505f86868684604051602001610a8f94939291906122c7565b6040516020818303038152906040528051906020012090505f610ab182611139565b90505f610af38287878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061118b92505050565b90506001600160a01b0381163314610b415760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610381565b60975460405163d475ab0360e01b81526001600160a01b038b811660048301529091169063d475ab03906024015f604051808303815f87803b158015610b85575f80fd5b505af1158015610b97573d5f803e3d5ffd5b50505050505050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bee5760405162461bcd60e51b8152600401610381906122fd565b610bf882826112c1565b5050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c445760405162461bcd60e51b8152600401610381906122fd565b61085581611340565b610c556111ad565b610855816113ba565b5f54610100900460ff1615808015610c7c57505f54600160ff909116105b80610c955750303b158015610c9557505f5460ff166001145b610cf85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610381565b5f805460ff191660011790558015610d19575f805461ff0019166101001790555b610d238484611406565b609780546001600160a01b0319166001600160a01b0384161790558015610d83575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6060610d93611482565b905090565b610da06111ad565b6001600160a01b038116610e055760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610381565b61085581611270565b610e166115b6565b610bf88282611650565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631703a0186040518163ffffffff1660e01b81526004015f60405180830381865afa158015610e7e573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610ea591908101906123a3565b8051519091505f816001600160401b03811115610ec457610ec4611ead565b604051908082528060200260200182016040528015610eed578160200160208202803683370190505b5090505f5b82811015610f4b578351805182908110610f0e57610f0e612496565b60200260200101515f0151828281518110610f2b57610f2b612496565b6001600160a01b0390921660209283029190910190910152600101610ef2565b50604051639004134760e01b81525f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639004134790610f9c90899086906004016124aa565b5f60405180830381865afa158015610fb6573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610fdd9190810190612505565b90505f836001600160401b03811115610ff857610ff8611ead565b604051908082528060200260200182016040528015611021578160200160208202803683370190505b5090505f805b85811015611066575f84828151811061104257611042612496565b6020026020010151111561105e578161105a81612599565b9250505b600101611027565b505f816001600160401b0381111561108057611080611ead565b6040519080825280602002602001820160405280156110a9578160200160208202803683370190505b5090505f5b8681101561112c575f8582815181106110c9576110c9612496565b60200260200101511115611124578381815181106110e9576110e9612496565b602002602001015182828151811061110357611103612496565b60200260200101906001600160a01b031690816001600160a01b0316815250505b6001016110ae565b5098975050505050505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018290525f90605c01604051602081830303815290604052805190602001209050919050565b5f805f6111988585611960565b915091506111a5816119cb565b509392505050565b6033546001600160a01b031633146108695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610381565b606554604080516001600160a01b03928316815291831660208301527fe11cddf1816a43318ca175bbc52cd0185436e9cbead7c83acc54a73e461717e3910160405180910390a1606580546001600160a01b0319166001600160a01b0392909216919091179055565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b604051639926ee7d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639926ee7d9061130f90859085906004016125df565b5f604051808303815f87803b158015611326575f80fd5b505af1158015611338573d5f803e3d5ffd5b505050505050565b6040516351b27a6d60e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a364f4da906024015b5f604051808303815f87803b1580156113a1575f80fd5b505af11580156113b3573d5f803e3d5ffd5b5050505050565b60405163a98fb35560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a98fb3559061138a908490600401612629565b5f54610100900460ff166114705760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610381565b61147982611270565b610bf881611207565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631703a0186040518163ffffffff1660e01b81526004015f60405180830381865afa1580156114e0573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261150791908101906123a3565b90505f815f0151516001600160401b0381111561152657611526611ead565b60405190808252806020026020018201604052801561154f578160200160208202803683370190505b5090505f5b8251518110156115af57825180518290811061157257611572612496565b60200260200101515f015182828151811061158f5761158f612496565b6001600160a01b0390921660209283029190910190910152600101611554565b5092915050565b6065546001600160a01b031633146108695760405162461bcd60e51b815260206004820152605160248201527f4543445341536572766963654d616e61676572426173652e6f6e6c795265776160448201527f726473496e69746961746f723a2063616c6c6572206973206e6f7420746865206064820152703932bbb0b932399034b734ba34b0ba37b960791b608482015260a401610381565b5f5b818110156119115782828281811061166c5761166c612496565b905060200281019061167e919061263b565b61168f906040810190602001611cb1565b6001600160a01b03166323b872dd33308686868181106116b1576116b1612496565b90506020028101906116c3919061263b565b604080516001600160e01b031960e087901b1681526001600160a01b039485166004820152939092166024840152013560448201526064016020604051808303815f875af1158015611717573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061173b9190612664565b505f83838381811061174f5761174f612496565b9050602002810190611761919061263b565b611772906040810190602001611cb1565b604051636eb1769f60e11b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152919091169063dd62ed3e90604401602060405180830381865afa1580156117de573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611802919061267d565b905083838381811061181657611816612496565b9050602002810190611828919061263b565b611839906040810190602001611cb1565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000008387878781811061187b5761187b612496565b905060200281019061188d919061263b565b6040013561189b9190612694565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303815f875af11580156118e3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119079190612664565b5050600101611652565b5060405163fce36c7d60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fce36c7d9061130f908590859060040161271e565b5f808251604103611994576020830151604084015160608501515f1a61198887828585611b80565b945094505050506119c4565b82516040036119bd57602083015160408401516119b2868383611c65565b9350935050506119c4565b505f905060025b9250929050565b5f8160048111156119de576119de612819565b036119e65750565b60018160048111156119fa576119fa612819565b03611a475760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610381565b6002816004811115611a5b57611a5b612819565b03611aa85760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610381565b6003816004811115611abc57611abc612819565b03611b145760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610381565b6004816004811115611b2857611b28612819565b036108555760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610381565b5f807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611bb557505f90506003611c5c565b8460ff16601b14158015611bcd57508460ff16601c14155b15611bdd57505f90506004611c5c565b604080515f8082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611c2e573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116611c56575f60019250925050611c5c565b91505f90505b94509492505050565b5f806001600160ff1b03831681611c8160ff86901c601b612694565b9050611c8f87828885611b80565b935093505050935093915050565b6001600160a01b0381168114610855575f80fd5b5f60208284031215611cc1575f80fd5b8135611ccc81611c9d565b9392505050565b602080825282518282018190525f9190848201906040850190845b81811015611d135783516001600160a01b031683529284019291840191600101611cee565b50909695505050505050565b5f8083601f840112611d2f575f80fd5b5081356001600160401b03811115611d45575f80fd5b6020830191508360208285010111156119c4575f80fd5b5f805f60408486031215611d6e575f80fd5b8335611d7981611c9d565b925060208401356001600160401b03811115611d93575f80fd5b611d9f86828701611d1f565b9497909650939450505050565b5f805f805f8060808789031215611dc1575f80fd5b8635611dcc81611c9d565b95506020870135945060408701356001600160401b0380821115611dee575f80fd5b611dfa8a838b01611d1f565b90965094506060890135915080821115611e12575f80fd5b50611e1f89828a01611d1f565b979a9699509497509295939492505050565b5f805f805f60608688031215611e45575f80fd5b8535611e5081611c9d565b945060208601356001600160401b0380821115611e6b575f80fd5b611e7789838a01611d1f565b90965094506040880135915080821115611e8f575f80fd5b50611e9c88828901611d1f565b969995985093965092949392505050565b634e487b7160e01b5f52604160045260245ffd5b604051606081016001600160401b0381118282101715611ee357611ee3611ead565b60405290565b604051602081016001600160401b0381118282101715611ee357611ee3611ead565b604080519081016001600160401b0381118282101715611ee357611ee3611ead565b604051601f8201601f191681016001600160401b0381118282101715611f5557611f55611ead565b604052919050565b5f6001600160401b03821115611f7557611f75611ead565b50601f01601f191660200190565b5f611f95611f9084611f5d565b611f2d565b9050828152838383011115611fa8575f80fd5b828260208301375f602084830101529392505050565b5f8060408385031215611fcf575f80fd5b8235611fda81611c9d565b915060208301356001600160401b0380821115611ff5575f80fd5b9084019060608287031215612008575f80fd5b612010611ec1565b82358281111561201e575f80fd5b83019150601f82018713612030575f80fd5b61203f87833560208501611f83565b815260208301356020820152604083013560408201528093505050509250929050565b5f60208284031215612072575f80fd5b81356001600160401b03811115612087575f80fd5b8201601f81018413612097575f80fd5b6120a684823560208401611f83565b949350505050565b5f805f606084860312156120c0575f80fd5b83356120cb81611c9d565b925060208401356120db81611c9d565b915060408401356120eb81611c9d565b809150509250925092565b5f8060208385031215612107575f80fd5b82356001600160401b038082111561211d575f80fd5b818501915085601f830112612130575f80fd5b81358181111561213e575f80fd5b8660208260051b8501011115612152575f80fd5b60209290920196919550909350505050565b5f60208284031215612174575f80fd5b8151611ccc81611c9d565b8051801515811461218e575f80fd5b919050565b5f606082840312156121a3575f80fd5b6121ab611ec1565b82518152602083015160208201526121c56040840161217f565b60408201529392505050565b5f602082840312156121e1575f80fd5b81516001600160401b038111156121f6575f80fd5b8201601f81018413612206575f80fd5b8051612214611f9082611f5d565b818152856020838501011115612228575f80fd5b8160208401602083015e5f91810160200191909152949350505050565b5f81518060208401855e5f93019283525090919050565b6001600160601b03198660601b168152846014820152828460348301375f6034848301015f815261228d8185612245565b98975050505050505050565b60208152816020820152818360408301375f818301604090810191909152601f909201601f19160101919050565b6001600160601b03198560601b168152828460148301375f6014848301015f81526122f28185612245565b979650505050505050565b6020808252604a908201527f4543445341536572766963654d616e61676572426173652e6f6e6c795374616b60408201527f6552656769737472793a2063616c6c6572206973206e6f7420746865207374616060820152696b65526567697374727960b01b608082015260a00190565b5f6001600160401b0382111561238557612385611ead565b5060051b60200190565b6001600160601b0381168114610855575f80fd5b5f60208083850312156123b4575f80fd5b82516001600160401b03808211156123ca575f80fd5b81850191508282870312156123dd575f80fd5b6123e5611ee9565b8251828111156123f3575f80fd5b80840193505086601f840112612407575f80fd5b82519150612417611f908361236d565b82815260069290921b83018401918481019088841115612435575f80fd5b938501935b83851015612489576040858a031215612451575f80fd5b612459611f0b565b855161246481611c9d565b8152858701516124738161238f565b818801528252604094909401939085019061243a565b8252509695505050505050565b634e487b7160e01b5f52603260045260245ffd5b6001600160a01b0383811682526040602080840182905284519184018290525f92858201929091906060860190855b818110156124f75785518516835294830194918301916001016124d9565b509098975050505050505050565b5f6020808385031215612516575f80fd5b82516001600160401b0381111561252b575f80fd5b8301601f8101851361253b575f80fd5b8051612549611f908261236d565b81815260059190911b82018301908381019087831115612567575f80fd5b928401925b828410156122f25783518252928401929084019061256c565b634e487b7160e01b5f52601160045260245ffd5b5f600182016125aa576125aa612585565b5060010190565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b60018060a01b0383168152604060208201525f82516060604084015261260860a08401826125b1565b90506020840151606084015260408401516080840152809150509392505050565b602081525f611ccc60208301846125b1565b5f8235609e1983360301811261264f575f80fd5b9190910192915050565b803561218e81611c9d565b5f60208284031215612674575f80fd5b611ccc8261217f565b5f6020828403121561268d575f80fd5b5051919050565b808201808211156102a3576102a3612585565b8183525f60208085019450825f5b858110156127005781356126c881611c9d565b6001600160a01b03168752818301356126e08161238f565b6001600160601b03168784015260409687019691909101906001016126b5565b509495945050505050565b803563ffffffff8116811461218e575f80fd5b60208082528181018390525f906040808401600586901b8501820187855b888110156124f757878303603f190184528135368b9003609e19018112612761575f80fd5b8a0160a0813536839003601e19018112612779575f80fd5b820188810190356001600160401b03811115612793575f80fd5b8060061b36038213156127a4575f80fd5b8287526127b483880182846126a7565b925050506127c3888301612659565b6001600160a01b031688860152818701358786015260606127e581840161270b565b63ffffffff169086015260806127fc83820161270b565b63ffffffff1695019490945250928501929085019060010161273c565b634e487b7160e01b5f52602160045260245ffdfea2646970667358221220db4c5f799c444679761edec971f1d00c794b2a083e965c95b46aca98e2d2f52c64736f6c63430008190033",
}

// BitDSMServiceManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use BitDSMServiceManagerMetaData.ABI instead.
var BitDSMServiceManagerABI = BitDSMServiceManagerMetaData.ABI

// BitDSMServiceManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BitDSMServiceManagerMetaData.Bin instead.
var BitDSMServiceManagerBin = BitDSMServiceManagerMetaData.Bin

// DeployBitDSMServiceManager deploys a new Ethereum contract, binding an instance of BitDSMServiceManager to it.
func DeployBitDSMServiceManager(auth *bind.TransactOpts, backend bind.ContractBackend, _avsDirectory common.Address, _bitDSMRegistry common.Address, _rewardsCoordinator common.Address, _delegationManager common.Address) (common.Address, *types.Transaction, *BitDSMServiceManager, error) {
	parsed, err := BitDSMServiceManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BitDSMServiceManagerBin), backend, _avsDirectory, _bitDSMRegistry, _rewardsCoordinator, _delegationManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BitDSMServiceManager{BitDSMServiceManagerCaller: BitDSMServiceManagerCaller{contract: contract}, BitDSMServiceManagerTransactor: BitDSMServiceManagerTransactor{contract: contract}, BitDSMServiceManagerFilterer: BitDSMServiceManagerFilterer{contract: contract}}, nil
}

// BitDSMServiceManager is an auto generated Go binding around an Ethereum contract.
type BitDSMServiceManager struct {
	BitDSMServiceManagerCaller     // Read-only binding to the contract
	BitDSMServiceManagerTransactor // Write-only binding to the contract
	BitDSMServiceManagerFilterer   // Log filterer for contract events
}

// BitDSMServiceManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type BitDSMServiceManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BitDSMServiceManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BitDSMServiceManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BitDSMServiceManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BitDSMServiceManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BitDSMServiceManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BitDSMServiceManagerSession struct {
	Contract     *BitDSMServiceManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// BitDSMServiceManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BitDSMServiceManagerCallerSession struct {
	Contract *BitDSMServiceManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// BitDSMServiceManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BitDSMServiceManagerTransactorSession struct {
	Contract     *BitDSMServiceManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// BitDSMServiceManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type BitDSMServiceManagerRaw struct {
	Contract *BitDSMServiceManager // Generic contract binding to access the raw methods on
}

// BitDSMServiceManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BitDSMServiceManagerCallerRaw struct {
	Contract *BitDSMServiceManagerCaller // Generic read-only contract binding to access the raw methods on
}

// BitDSMServiceManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BitDSMServiceManagerTransactorRaw struct {
	Contract *BitDSMServiceManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBitDSMServiceManager creates a new instance of BitDSMServiceManager, bound to a specific deployed contract.
func NewBitDSMServiceManager(address common.Address, backend bind.ContractBackend) (*BitDSMServiceManager, error) {
	contract, err := bindBitDSMServiceManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManager{BitDSMServiceManagerCaller: BitDSMServiceManagerCaller{contract: contract}, BitDSMServiceManagerTransactor: BitDSMServiceManagerTransactor{contract: contract}, BitDSMServiceManagerFilterer: BitDSMServiceManagerFilterer{contract: contract}}, nil
}

// NewBitDSMServiceManagerCaller creates a new read-only instance of BitDSMServiceManager, bound to a specific deployed contract.
func NewBitDSMServiceManagerCaller(address common.Address, caller bind.ContractCaller) (*BitDSMServiceManagerCaller, error) {
	contract, err := bindBitDSMServiceManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManagerCaller{contract: contract}, nil
}

// NewBitDSMServiceManagerTransactor creates a new write-only instance of BitDSMServiceManager, bound to a specific deployed contract.
func NewBitDSMServiceManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*BitDSMServiceManagerTransactor, error) {
	contract, err := bindBitDSMServiceManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManagerTransactor{contract: contract}, nil
}

// NewBitDSMServiceManagerFilterer creates a new log filterer instance of BitDSMServiceManager, bound to a specific deployed contract.
func NewBitDSMServiceManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*BitDSMServiceManagerFilterer, error) {
	contract, err := bindBitDSMServiceManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManagerFilterer{contract: contract}, nil
}

// bindBitDSMServiceManager binds a generic wrapper to an already deployed contract.
func bindBitDSMServiceManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BitDSMServiceManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BitDSMServiceManager *BitDSMServiceManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BitDSMServiceManager.Contract.BitDSMServiceManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BitDSMServiceManager *BitDSMServiceManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.BitDSMServiceManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BitDSMServiceManager *BitDSMServiceManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.BitDSMServiceManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BitDSMServiceManager *BitDSMServiceManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BitDSMServiceManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.contract.Transact(opts, method, params...)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerCaller) AvsDirectory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BitDSMServiceManager.contract.Call(opts, &out, "avsDirectory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerSession) AvsDirectory() (common.Address, error) {
	return _BitDSMServiceManager.Contract.AvsDirectory(&_BitDSMServiceManager.CallOpts)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerCallerSession) AvsDirectory() (common.Address, error) {
	return _BitDSMServiceManager.Contract.AvsDirectory(&_BitDSMServiceManager.CallOpts)
}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address _operator) view returns(address[])
func (_BitDSMServiceManager *BitDSMServiceManagerCaller) GetOperatorRestakedStrategies(opts *bind.CallOpts, _operator common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _BitDSMServiceManager.contract.Call(opts, &out, "getOperatorRestakedStrategies", _operator)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address _operator) view returns(address[])
func (_BitDSMServiceManager *BitDSMServiceManagerSession) GetOperatorRestakedStrategies(_operator common.Address) ([]common.Address, error) {
	return _BitDSMServiceManager.Contract.GetOperatorRestakedStrategies(&_BitDSMServiceManager.CallOpts, _operator)
}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address _operator) view returns(address[])
func (_BitDSMServiceManager *BitDSMServiceManagerCallerSession) GetOperatorRestakedStrategies(_operator common.Address) ([]common.Address, error) {
	return _BitDSMServiceManager.Contract.GetOperatorRestakedStrategies(&_BitDSMServiceManager.CallOpts, _operator)
}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_BitDSMServiceManager *BitDSMServiceManagerCaller) GetRestakeableStrategies(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _BitDSMServiceManager.contract.Call(opts, &out, "getRestakeableStrategies")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_BitDSMServiceManager *BitDSMServiceManagerSession) GetRestakeableStrategies() ([]common.Address, error) {
	return _BitDSMServiceManager.Contract.GetRestakeableStrategies(&_BitDSMServiceManager.CallOpts)
}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_BitDSMServiceManager *BitDSMServiceManagerCallerSession) GetRestakeableStrategies() ([]common.Address, error) {
	return _BitDSMServiceManager.Contract.GetRestakeableStrategies(&_BitDSMServiceManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BitDSMServiceManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerSession) Owner() (common.Address, error) {
	return _BitDSMServiceManager.Contract.Owner(&_BitDSMServiceManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerCallerSession) Owner() (common.Address, error) {
	return _BitDSMServiceManager.Contract.Owner(&_BitDSMServiceManager.CallOpts)
}

// RewardsInitiator is a free data retrieval call binding the contract method 0xfc299dee.
//
// Solidity: function rewardsInitiator() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerCaller) RewardsInitiator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BitDSMServiceManager.contract.Call(opts, &out, "rewardsInitiator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardsInitiator is a free data retrieval call binding the contract method 0xfc299dee.
//
// Solidity: function rewardsInitiator() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerSession) RewardsInitiator() (common.Address, error) {
	return _BitDSMServiceManager.Contract.RewardsInitiator(&_BitDSMServiceManager.CallOpts)
}

// RewardsInitiator is a free data retrieval call binding the contract method 0xfc299dee.
//
// Solidity: function rewardsInitiator() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerCallerSession) RewardsInitiator() (common.Address, error) {
	return _BitDSMServiceManager.Contract.RewardsInitiator(&_BitDSMServiceManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerCaller) StakeRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BitDSMServiceManager.contract.Call(opts, &out, "stakeRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerSession) StakeRegistry() (common.Address, error) {
	return _BitDSMServiceManager.Contract.StakeRegistry(&_BitDSMServiceManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerCallerSession) StakeRegistry() (common.Address, error) {
	return _BitDSMServiceManager.Contract.StakeRegistry(&_BitDSMServiceManager.CallOpts)
}

// ConfirmDeposit is a paid mutator transaction binding the contract method 0x34c9b14e.
//
// Solidity: function confirmDeposit(address pod, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) ConfirmDeposit(opts *bind.TransactOpts, pod common.Address, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "confirmDeposit", pod, signature)
}

// ConfirmDeposit is a paid mutator transaction binding the contract method 0x34c9b14e.
//
// Solidity: function confirmDeposit(address pod, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) ConfirmDeposit(pod common.Address, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.ConfirmDeposit(&_BitDSMServiceManager.TransactOpts, pod, signature)
}

// ConfirmDeposit is a paid mutator transaction binding the contract method 0x34c9b14e.
//
// Solidity: function confirmDeposit(address pod, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) ConfirmDeposit(pod common.Address, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.ConfirmDeposit(&_BitDSMServiceManager.TransactOpts, pod, signature)
}

// ConfirmWithdrawal is a paid mutator transaction binding the contract method 0x7b615541.
//
// Solidity: function confirmWithdrawal(address pod, bytes transaction, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) ConfirmWithdrawal(opts *bind.TransactOpts, pod common.Address, transaction []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "confirmWithdrawal", pod, transaction, signature)
}

// ConfirmWithdrawal is a paid mutator transaction binding the contract method 0x7b615541.
//
// Solidity: function confirmWithdrawal(address pod, bytes transaction, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) ConfirmWithdrawal(pod common.Address, transaction []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.ConfirmWithdrawal(&_BitDSMServiceManager.TransactOpts, pod, transaction, signature)
}

// ConfirmWithdrawal is a paid mutator transaction binding the contract method 0x7b615541.
//
// Solidity: function confirmWithdrawal(address pod, bytes transaction, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) ConfirmWithdrawal(pod common.Address, transaction []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.ConfirmWithdrawal(&_BitDSMServiceManager.TransactOpts, pod, transaction, signature)
}

// CreateAVSRewardsSubmission is a paid mutator transaction binding the contract method 0xfce36c7d.
//
// Solidity: function createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[] rewardsSubmissions) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) CreateAVSRewardsSubmission(opts *bind.TransactOpts, rewardsSubmissions []IRewardsCoordinatorRewardsSubmission) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "createAVSRewardsSubmission", rewardsSubmissions)
}

// CreateAVSRewardsSubmission is a paid mutator transaction binding the contract method 0xfce36c7d.
//
// Solidity: function createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[] rewardsSubmissions) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) CreateAVSRewardsSubmission(rewardsSubmissions []IRewardsCoordinatorRewardsSubmission) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.CreateAVSRewardsSubmission(&_BitDSMServiceManager.TransactOpts, rewardsSubmissions)
}

// CreateAVSRewardsSubmission is a paid mutator transaction binding the contract method 0xfce36c7d.
//
// Solidity: function createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[] rewardsSubmissions) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) CreateAVSRewardsSubmission(rewardsSubmissions []IRewardsCoordinatorRewardsSubmission) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.CreateAVSRewardsSubmission(&_BitDSMServiceManager.TransactOpts, rewardsSubmissions)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) DeregisterOperatorFromAVS(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "deregisterOperatorFromAVS", operator)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) DeregisterOperatorFromAVS(operator common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.DeregisterOperatorFromAVS(&_BitDSMServiceManager.TransactOpts, operator)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) DeregisterOperatorFromAVS(operator common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.DeregisterOperatorFromAVS(&_BitDSMServiceManager.TransactOpts, operator)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _owner, address _rewardsInitiator, address bitcoinPodManager) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) Initialize(opts *bind.TransactOpts, _owner common.Address, _rewardsInitiator common.Address, bitcoinPodManager common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "initialize", _owner, _rewardsInitiator, bitcoinPodManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _owner, address _rewardsInitiator, address bitcoinPodManager) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) Initialize(_owner common.Address, _rewardsInitiator common.Address, bitcoinPodManager common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.Initialize(&_BitDSMServiceManager.TransactOpts, _owner, _rewardsInitiator, bitcoinPodManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _owner, address _rewardsInitiator, address bitcoinPodManager) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) Initialize(_owner common.Address, _rewardsInitiator common.Address, bitcoinPodManager common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.Initialize(&_BitDSMServiceManager.TransactOpts, _owner, _rewardsInitiator, bitcoinPodManager)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) RegisterOperatorToAVS(opts *bind.TransactOpts, operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "registerOperatorToAVS", operator, operatorSignature)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) RegisterOperatorToAVS(operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.RegisterOperatorToAVS(&_BitDSMServiceManager.TransactOpts, operator, operatorSignature)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) RegisterOperatorToAVS(operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.RegisterOperatorToAVS(&_BitDSMServiceManager.TransactOpts, operator, operatorSignature)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.RenounceOwnership(&_BitDSMServiceManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.RenounceOwnership(&_BitDSMServiceManager.TransactOpts)
}

// SetRewardsInitiator is a paid mutator transaction binding the contract method 0x3bc28c8c.
//
// Solidity: function setRewardsInitiator(address newRewardsInitiator) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) SetRewardsInitiator(opts *bind.TransactOpts, newRewardsInitiator common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "setRewardsInitiator", newRewardsInitiator)
}

// SetRewardsInitiator is a paid mutator transaction binding the contract method 0x3bc28c8c.
//
// Solidity: function setRewardsInitiator(address newRewardsInitiator) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) SetRewardsInitiator(newRewardsInitiator common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.SetRewardsInitiator(&_BitDSMServiceManager.TransactOpts, newRewardsInitiator)
}

// SetRewardsInitiator is a paid mutator transaction binding the contract method 0x3bc28c8c.
//
// Solidity: function setRewardsInitiator(address newRewardsInitiator) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) SetRewardsInitiator(newRewardsInitiator common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.SetRewardsInitiator(&_BitDSMServiceManager.TransactOpts, newRewardsInitiator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.TransferOwnership(&_BitDSMServiceManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.TransferOwnership(&_BitDSMServiceManager.TransactOpts, newOwner)
}

// UpdateAVSMetadataURI is a paid mutator transaction binding the contract method 0xa98fb355.
//
// Solidity: function updateAVSMetadataURI(string _metadataURI) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) UpdateAVSMetadataURI(opts *bind.TransactOpts, _metadataURI string) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "updateAVSMetadataURI", _metadataURI)
}

// UpdateAVSMetadataURI is a paid mutator transaction binding the contract method 0xa98fb355.
//
// Solidity: function updateAVSMetadataURI(string _metadataURI) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) UpdateAVSMetadataURI(_metadataURI string) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.UpdateAVSMetadataURI(&_BitDSMServiceManager.TransactOpts, _metadataURI)
}

// UpdateAVSMetadataURI is a paid mutator transaction binding the contract method 0xa98fb355.
//
// Solidity: function updateAVSMetadataURI(string _metadataURI) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) UpdateAVSMetadataURI(_metadataURI string) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.UpdateAVSMetadataURI(&_BitDSMServiceManager.TransactOpts, _metadataURI)
}

// WithdrawBitcoinCompleteTx is a paid mutator transaction binding the contract method 0x3b7d82ef.
//
// Solidity: function withdrawBitcoinCompleteTx(address pod, uint256 amount, bytes completeTx, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) WithdrawBitcoinCompleteTx(opts *bind.TransactOpts, pod common.Address, amount *big.Int, completeTx []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "withdrawBitcoinCompleteTx", pod, amount, completeTx, signature)
}

// WithdrawBitcoinCompleteTx is a paid mutator transaction binding the contract method 0x3b7d82ef.
//
// Solidity: function withdrawBitcoinCompleteTx(address pod, uint256 amount, bytes completeTx, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) WithdrawBitcoinCompleteTx(pod common.Address, amount *big.Int, completeTx []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.WithdrawBitcoinCompleteTx(&_BitDSMServiceManager.TransactOpts, pod, amount, completeTx, signature)
}

// WithdrawBitcoinCompleteTx is a paid mutator transaction binding the contract method 0x3b7d82ef.
//
// Solidity: function withdrawBitcoinCompleteTx(address pod, uint256 amount, bytes completeTx, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) WithdrawBitcoinCompleteTx(pod common.Address, amount *big.Int, completeTx []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.WithdrawBitcoinCompleteTx(&_BitDSMServiceManager.TransactOpts, pod, amount, completeTx, signature)
}

// WithdrawBitcoinPSBT is a paid mutator transaction binding the contract method 0x3b1a4e44.
//
// Solidity: function withdrawBitcoinPSBT(address pod, uint256 amount, bytes psbtTransaction, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) WithdrawBitcoinPSBT(opts *bind.TransactOpts, pod common.Address, amount *big.Int, psbtTransaction []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "withdrawBitcoinPSBT", pod, amount, psbtTransaction, signature)
}

// WithdrawBitcoinPSBT is a paid mutator transaction binding the contract method 0x3b1a4e44.
//
// Solidity: function withdrawBitcoinPSBT(address pod, uint256 amount, bytes psbtTransaction, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) WithdrawBitcoinPSBT(pod common.Address, amount *big.Int, psbtTransaction []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.WithdrawBitcoinPSBT(&_BitDSMServiceManager.TransactOpts, pod, amount, psbtTransaction, signature)
}

// WithdrawBitcoinPSBT is a paid mutator transaction binding the contract method 0x3b1a4e44.
//
// Solidity: function withdrawBitcoinPSBT(address pod, uint256 amount, bytes psbtTransaction, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) WithdrawBitcoinPSBT(pod common.Address, amount *big.Int, psbtTransaction []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.WithdrawBitcoinPSBT(&_BitDSMServiceManager.TransactOpts, pod, amount, psbtTransaction, signature)
}

// BitDSMServiceManagerBitcoinWithdrawalTransactionSignedIterator is returned from FilterBitcoinWithdrawalTransactionSigned and is used to iterate over the raw logs and unpacked data for BitcoinWithdrawalTransactionSigned events raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerBitcoinWithdrawalTransactionSignedIterator struct {
	Event *BitDSMServiceManagerBitcoinWithdrawalTransactionSigned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BitDSMServiceManagerBitcoinWithdrawalTransactionSignedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BitDSMServiceManagerBitcoinWithdrawalTransactionSigned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BitDSMServiceManagerBitcoinWithdrawalTransactionSigned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BitDSMServiceManagerBitcoinWithdrawalTransactionSignedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BitDSMServiceManagerBitcoinWithdrawalTransactionSignedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BitDSMServiceManagerBitcoinWithdrawalTransactionSigned represents a BitcoinWithdrawalTransactionSigned event raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerBitcoinWithdrawalTransactionSigned struct {
	Pod      common.Address
	Operator common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBitcoinWithdrawalTransactionSigned is a free log retrieval operation binding the contract event 0xce93a128bcccad6214b8d927323bca4acc32d14ee0ca93c4e647530c44306fc7.
//
// Solidity: event BitcoinWithdrawalTransactionSigned(address indexed pod, address indexed operator, uint256 amount)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) FilterBitcoinWithdrawalTransactionSigned(opts *bind.FilterOpts, pod []common.Address, operator []common.Address) (*BitDSMServiceManagerBitcoinWithdrawalTransactionSignedIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _BitDSMServiceManager.contract.FilterLogs(opts, "BitcoinWithdrawalTransactionSigned", podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManagerBitcoinWithdrawalTransactionSignedIterator{contract: _BitDSMServiceManager.contract, event: "BitcoinWithdrawalTransactionSigned", logs: logs, sub: sub}, nil
}

// WatchBitcoinWithdrawalTransactionSigned is a free log subscription operation binding the contract event 0xce93a128bcccad6214b8d927323bca4acc32d14ee0ca93c4e647530c44306fc7.
//
// Solidity: event BitcoinWithdrawalTransactionSigned(address indexed pod, address indexed operator, uint256 amount)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) WatchBitcoinWithdrawalTransactionSigned(opts *bind.WatchOpts, sink chan<- *BitDSMServiceManagerBitcoinWithdrawalTransactionSigned, pod []common.Address, operator []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _BitDSMServiceManager.contract.WatchLogs(opts, "BitcoinWithdrawalTransactionSigned", podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BitDSMServiceManagerBitcoinWithdrawalTransactionSigned)
				if err := _BitDSMServiceManager.contract.UnpackLog(event, "BitcoinWithdrawalTransactionSigned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitcoinWithdrawalTransactionSigned is a log parse operation binding the contract event 0xce93a128bcccad6214b8d927323bca4acc32d14ee0ca93c4e647530c44306fc7.
//
// Solidity: event BitcoinWithdrawalTransactionSigned(address indexed pod, address indexed operator, uint256 amount)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) ParseBitcoinWithdrawalTransactionSigned(log types.Log) (*BitDSMServiceManagerBitcoinWithdrawalTransactionSigned, error) {
	event := new(BitDSMServiceManagerBitcoinWithdrawalTransactionSigned)
	if err := _BitDSMServiceManager.contract.UnpackLog(event, "BitcoinWithdrawalTransactionSigned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BitDSMServiceManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerInitializedIterator struct {
	Event *BitDSMServiceManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BitDSMServiceManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BitDSMServiceManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BitDSMServiceManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BitDSMServiceManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BitDSMServiceManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BitDSMServiceManagerInitialized represents a Initialized event raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*BitDSMServiceManagerInitializedIterator, error) {

	logs, sub, err := _BitDSMServiceManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManagerInitializedIterator{contract: _BitDSMServiceManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *BitDSMServiceManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _BitDSMServiceManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BitDSMServiceManagerInitialized)
				if err := _BitDSMServiceManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) ParseInitialized(log types.Log) (*BitDSMServiceManagerInitialized, error) {
	event := new(BitDSMServiceManagerInitialized)
	if err := _BitDSMServiceManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BitDSMServiceManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerOwnershipTransferredIterator struct {
	Event *BitDSMServiceManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BitDSMServiceManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BitDSMServiceManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BitDSMServiceManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BitDSMServiceManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BitDSMServiceManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BitDSMServiceManagerOwnershipTransferred represents a OwnershipTransferred event raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BitDSMServiceManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BitDSMServiceManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManagerOwnershipTransferredIterator{contract: _BitDSMServiceManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BitDSMServiceManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BitDSMServiceManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BitDSMServiceManagerOwnershipTransferred)
				if err := _BitDSMServiceManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) ParseOwnershipTransferred(log types.Log) (*BitDSMServiceManagerOwnershipTransferred, error) {
	event := new(BitDSMServiceManagerOwnershipTransferred)
	if err := _BitDSMServiceManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BitDSMServiceManagerRewardsInitiatorUpdatedIterator is returned from FilterRewardsInitiatorUpdated and is used to iterate over the raw logs and unpacked data for RewardsInitiatorUpdated events raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerRewardsInitiatorUpdatedIterator struct {
	Event *BitDSMServiceManagerRewardsInitiatorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BitDSMServiceManagerRewardsInitiatorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BitDSMServiceManagerRewardsInitiatorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BitDSMServiceManagerRewardsInitiatorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BitDSMServiceManagerRewardsInitiatorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BitDSMServiceManagerRewardsInitiatorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BitDSMServiceManagerRewardsInitiatorUpdated represents a RewardsInitiatorUpdated event raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerRewardsInitiatorUpdated struct {
	PrevRewardsInitiator common.Address
	NewRewardsInitiator  common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterRewardsInitiatorUpdated is a free log retrieval operation binding the contract event 0xe11cddf1816a43318ca175bbc52cd0185436e9cbead7c83acc54a73e461717e3.
//
// Solidity: event RewardsInitiatorUpdated(address prevRewardsInitiator, address newRewardsInitiator)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) FilterRewardsInitiatorUpdated(opts *bind.FilterOpts) (*BitDSMServiceManagerRewardsInitiatorUpdatedIterator, error) {

	logs, sub, err := _BitDSMServiceManager.contract.FilterLogs(opts, "RewardsInitiatorUpdated")
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManagerRewardsInitiatorUpdatedIterator{contract: _BitDSMServiceManager.contract, event: "RewardsInitiatorUpdated", logs: logs, sub: sub}, nil
}

// WatchRewardsInitiatorUpdated is a free log subscription operation binding the contract event 0xe11cddf1816a43318ca175bbc52cd0185436e9cbead7c83acc54a73e461717e3.
//
// Solidity: event RewardsInitiatorUpdated(address prevRewardsInitiator, address newRewardsInitiator)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) WatchRewardsInitiatorUpdated(opts *bind.WatchOpts, sink chan<- *BitDSMServiceManagerRewardsInitiatorUpdated) (event.Subscription, error) {

	logs, sub, err := _BitDSMServiceManager.contract.WatchLogs(opts, "RewardsInitiatorUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BitDSMServiceManagerRewardsInitiatorUpdated)
				if err := _BitDSMServiceManager.contract.UnpackLog(event, "RewardsInitiatorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardsInitiatorUpdated is a log parse operation binding the contract event 0xe11cddf1816a43318ca175bbc52cd0185436e9cbead7c83acc54a73e461717e3.
//
// Solidity: event RewardsInitiatorUpdated(address prevRewardsInitiator, address newRewardsInitiator)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) ParseRewardsInitiatorUpdated(log types.Log) (*BitDSMServiceManagerRewardsInitiatorUpdated, error) {
	event := new(BitDSMServiceManagerRewardsInitiatorUpdated)
	if err := _BitDSMServiceManager.contract.UnpackLog(event, "RewardsInitiatorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
